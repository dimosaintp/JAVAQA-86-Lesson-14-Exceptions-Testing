package ru.netology;

import ru.netology.repository.ProductRepository;

/**
 * 14 Исключительные ситуации и их обработка. Тестирование исключений.
 * 14.1 Стектрейс. Перехват ошибок.
 * <p>
 * repo.removeById(13); — несуществующий массив.
 * Когда мы пытаемся в данном случае удалить элемент массива — id 13 (несуществующий элемент массива),
 * то удаление происходит путём созданием нового массива, который выглядит, как старый, но меньше на 1, на тот самый
 * элемент c id 13. Так как, массив пустой, java пытается создать массив длиной -1, здесь и происходит ошибка.
 * <p>
 * Расшифровка сообщения об ошибке в консоли IDE:
 * Exception - исключительная ситуация.
 * in thread "main" - в потоке "main".
 * java.lang.NegativeArraySizeException - название класса исключения, объекта этой ошибки.
 * Create breakpoint (in method ru.netology.repository.ProductRepository.removeById:-1) — здесь не Java, а IDE
 * предлагает поставить точку остановки туда, где была ошибка, в данном случае на метод: repo.removeById(13);
 * В данному слушая ошибка заключается в попытке создать массив отрицательной длины: -1.
 * <p>
 * Далее идёт стектрейс — снимок стека вызовов в момент возникновения ошибки:
 * at ru.netology.repository.ProductRepository.removeById(ProductRepository.java:51)
 * at ru.netology.Main.main(Main.java:18)
 * <p>
 * Управление процессом умирания программы (понятного пользователю сообщения об ошибке).
 * Try - попытайся выполнить следующий метод.
 * Catch - поймай программу в момент умирания с определённым типом ошибки.
 * Если после try ошибки нет, то catch не выполняется.
 * По сути try и catch обрабатывают ошибки и останавливают процесс умирания программы.
 */


//public class Main {
//    public static void main(String[] args) {
//        ProductRepository repo = new ProductRepository();
//
//        try {
//            repo.removeById(13);
//            System.out.println("Всё в порядке!");
//        } catch (NegativeArraySizeException error) {
//            System.out.println("Возникла ошибка: " + error.getMessage());
//        }
//    }

/**
 * 14.2 Иерархия и выброс исключений.
 * Чтобы создать исключение, надо отнаследовать от класса Throwable или одного из его наследников.
 * <p>
 * 1-й стоит класс ошибки Throwable.
 * Самый главный наследник Throwable — Error. Java считает, что как то перехватывать и исцелять исключительные
 * ситуации такого класса — не нужно. Если произошла ошибка типа Error, то лучше дать ей спокойно умереть.
 * Чаще всего ошибки типа Error это ошибки самой IDE (Java машины), например, закончилась память и java больше
 * не может выполнять программу. Любая ошибка Error или её потомки являются критическими ошибками и ловить их не нужно.
 * <p>
 * 2-й наследник класса Throwable — Exception.
 * Exception делится на два главных вида ошибок:
 * 1-й — RuntimeException и все его потомки. (Не проверяемые исключения).
 * Можно писать Try, а можно не писать — ошибки компиляции не произойдёт.
 * NegativeArraySizeException - как раз такой вид исключения.
 * <p>
 * 2-й — Exception и все его потомки НЕ по линии RuntimeException — проверяемые исключения.
 * Такие исключения Java не пропустит, программа не завершится успешной компиляцией,
 * если мы ничего с этой ошибкой не сделаем.
 * Мы улучшим метод removeById(), добавив проверку на то, что элемент 13, переданный на удаление,
 * является положительным числом.
 *
 * В классе ProductRepository метод removeById(int id) (Строка 50).
 * Для старта процесса умирания программы нам необходимо:
 * 1-е создать отчёт об ошибке. Обычный класс java. RuntimeException error = new RuntimeException);
 * 2-е заставить java начать умирать с этим отчётом.
 */

//public class Main {
//    public static void main(String[] args) {
//        ProductRepository repo = new ProductRepository();
//
//        try {
//            repo.removeById(-100);
//        } catch (NegativeArraySizeException error) {
//            System.out.println("Возникла ошибка: " + error.getMessage());
//        }
//    }

/**
 * 14.3 Свои классы исключений. Тестирование исключений.
 * В действительности существует 2 принципиально разных вида ошибок:
 * 1-й — ошибки программиста. Например, пытаемся удалить массив, которого не существует. Как правило,
 * это не проверяемая ошибка.
 * 2-й — ошибки, которые мы, как программисты предположить не можем — проверяемые исключения.
 *
 * Тестировщиков интересует — как нужный объект в нужных обстоятельствах умирает, так как надо.
 * Для этого в Junit есть специальный assert — assertThrows.
 */

public class Main {
    public static void main(String[] args) {
        ProductRepository repo = new ProductRepository();

        try {
            repo.removeById(-100);
        } catch (NegativeArraySizeException error) {
            System.out.println("Возникла ошибка: " + error.getMessage());
        }
    }

}